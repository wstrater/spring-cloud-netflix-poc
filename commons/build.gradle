buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath('org.springframework.boot:spring-boot-gradle-plugin:1.2.3.RELEASE') 
        classpath('io.spring.gradle:dependency-management-plugin:0.5.0.RELEASE')
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'io.spring.dependency-management' 
apply plugin: 'maven'

sourceCompatibility = 1.7
targetCompatibility = 1.7

eclipse {
    classpath {
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7'
    }
}

repositories { 
    mavenLocal()
    mavenCentral() // maven { url: 'http://jcenter.bintray.com' }
}

dependencies {
    compile('javax.servlet:javax.servlet-api:3.1.0')
    // compile('com.netflix.feign:feign-core:8.1.1')
    compile('org.hamcrest:hamcrest-core:1.3')
    compile('log4j:log4j:1.2.17')

    testCompile('junit:junit:4.11') 
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from files(
        sourceSets.main.allSource,
    )
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from(
        javadoc.destinationDir,
    ) 
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            // snapshotRepository(url: "file://${System.properties['user.home']}/.m2/repository")
            repository(url: "file://${System.properties['user.home']}/.m2/repository")
        }
    }
}

/*
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${System.properties['user.home']}/.m2"
        }
    }
}
*/

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}
